/*
 * DeviceTemplate.java
 *
 * Created on June 15, 2007, 3:31 PM
 */

package faisal_TiLeD.adevgen.gui;

import faisal_TiLeD.adevgen.datastructure.DataManager;
import java.awt.Color;
import java.awt.Graphics;
import java.io.Serializable;
import javax.swing.JPanel;

/**
 *
 * @author  Administrator
 */
public class DeviceTemplate extends JPanel implements Serializable{
    private static int x_grid;
    
    
    private static int y_grid;
    
    private int x1;
    private int x2;
    private int y1;
    private int y2;
    
    private boolean isDrawing;
    private Color color = new Color(0,0,255,60);
    
    public void setColor(Color color) {
        this.color = color;
    }
    
    private DrawingStatusListener dsl;
    
    public void setDsl(DrawingStatusListener dsl) {
        this.dsl = dsl;
    }
    
    /** Creates new form BeanForm */
    public DeviceTemplate() {
        
        initComponents();
        x_grid = 20;
        y_grid = 16;
        
    }
    
    /**
     *
     * @param x_grid
     * @param y_grid
     */
    public void reGrid(int x_grid, int y_grid){
        this.x_grid = getWidth() / x_grid;
        this.y_grid = getHeight() / y_grid;
        repaint();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    
    
    public static int getX_grid() {
        return x_grid;
    }
    
    public static void setX_grid(int x_grid) {
        DeviceTemplate.x_grid = x_grid;
    }
    
    public static int getY_grid() {
        return y_grid;
    }
    
    public static void setY_grid(int y_grid) {
        DeviceTemplate.y_grid = y_grid;
    }
    
private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
    x2 = evt.getX() / x_grid;
    y2 = evt.getY() / y_grid;
    repaint();
}//GEN-LAST:event_formMouseDragged

private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
    x2 = evt.getX() / x_grid;
    y2 = evt.getY() / y_grid;
    
    if(isDrawing){
        if(dsl != null) dsl.drawFinished(x2, y2);
        isDrawing = false;
        repaint();
    }
    
}//GEN-LAST:event_formMouseReleased

private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
    if(evt.getButton() == evt.BUTTON1){
        x1 = evt.getX() / x_grid;
        y1 = evt.getY() / y_grid;
        isDrawing = true;
        if(dsl != null) dsl.drawStarted(x1, y1);
    }else{
        isDrawing = false;
        if(dsl != null) dsl.drawCanceled();
        repaint();
    }
    
}//GEN-LAST:event_formMousePressed

public void paint(Graphics g){
    super.paint(g);
    
    int i, j;
    
    
    g.setColor(new Color(50,50,250));
    for(i=0; i < this.getWidth(); i+= x_grid){
        for(j=0; j<this.getHeight(); j+= y_grid){
            g.drawLine(i, j, i, j);
        }
    }
    
    DataManager.getLm().paintAll(g, x_grid, y_grid, 0, 0, getWidth()/x_grid, getHeight()/y_grid);
    
    if(isDrawing){
        g.setColor(color);
        
        int a, b, c, d;
        
        if(x1 < x2) {
            a = x1;
            b = x2;
        }else{
            a = x2;
            b = x1;
        }
        
        if(y1 < y2){
            c = y1;
            d = y2;
        }else{
            c = y2;
            d = y1;
        }
        
        g.fillRect(a*x_grid, c*y_grid, (b-a+1)*x_grid, (d-c+1)*y_grid);
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
