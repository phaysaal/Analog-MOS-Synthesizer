/*
 * DocumentsHolder.java
 *
 * Created on March 12, 2007, 7:31 PM
 */

package faisal_TiLeD.adevgen.matchingchecker;


import faisal_TiLeD.adevgen.automatch.AutomationTester;
import faisal_TiLeD.adevgen.automatch.wizard.Wizard;
import faisal_TiLeD.adevgen.matchingchecker.*;
import faisal_TiLeD.adevgen.matchingchecker.DTSScript.ComplexRect;
import faisal_TiLeD.adevgen.matchingchecker.DTSScript.DTSParser;
import faisal_TiLeD.adevgen.objecthiererkey.Boundary;
import faisal_TiLeD.adevgen.objecthiererkey.Element;
import faisal_TiLeD.adevgen.objecthiererkey.GDSFile;
import faisal_TiLeD.adevgen.objecthiererkey.Structure;
import faisal_TiLeD.adevgen.starter.GDSIIView;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.io.File;
import java.io.RandomAccessFile;
import java.util.Vector;
import javax.swing.AbstractListModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.filechooser.FileFilter;



/**
 *
 * @author  Administrator
 */
//class StartApp extends JApplet implements ActionListener{
//    public void init(){
//        javax.swing.JButton btnStart;
//        btnStart = new javax.swing.JButton("Enjoy FS VLSI Layout Drawing");
//        btnStart.addActionListener(this);
//        getContentPane().setLayout(new java.awt.FlowLayout());
//        getContentPane().add(btnStart);
//        
//        
//        //new DocumentsHolder();
//    }
//    
//    public void actionPerformed(ActionEvent ae){
//        new DocumentsHolder();
//    }
//    
//    public static DocumentsHolder getDefaultApp(){
//        return DocumentsHolder.getDefaultApp();
//    }
//}

public class DocumentsHolder extends javax.swing.JFrame {
    public static final int MODE_DRAW = 1;
    public static final int MODE_EDIT = 2;
    public static final int MODE_ZOOM_IN = 3;
    public static final int MODE_ZOOM_OUT = 4;
    
    public static final int MODE_LEFT = 5;
    public static final int MODE_POINT = 6;
    public static final int MODE_SELECT_POINT = 7;
    public static final int MODE_CUT = 8;
    public static int canvasMode;
    public static int lambda;
    public static boolean isFill=false;
    public static boolean isGridVisible=true;
    //public static DocumentsHolder defaultApp;
    
    private DrawingLayer currentLayer = null;
    public DrawingLayer layers[] = null;
    public DrawingCanvas canvas;
    public DrawingObject types[] = null;
    //private DrawingObject currentType = null;
    private DrawingObject currentObject = null;
    private JRadioButton rdoTypes[];
    private Vector<ComplexRect> vRect;
    public Vector<DrawingComponent> vComp;
    public DrawingComponent currentComponent;
    
    private int i;
    
    public static DocumentsHolder defaultApp;
    private int size_w, size_h;
    
    
    class ListModel extends AbstractListModel{
        
        public int getSize() {
            return vComp.size();
        }
        
        public Object getElementAt(int index) {
            return vComp.get(index);
        }
        
        //public void add(String str){
        //    element.add(str);
        //}
    }
    
    public ListModel list;
    /** Creates new form DocumentsHolder */
    public DocumentsHolder() {
        super("FS VLSI Layout Drawing");
        defaultApp = this;
        initComponents();
        
        canvasMode = MODE_DRAW;
        lambda = 10;
        canvas = new DrawingCanvas(this);
        createObjects();
        addLayersToPanel(types.length);
        //currentType = types[0];
        //addObjectsToPanel();
        //getContentPane().add( new GraphicsTest(), BorderLayout.CENTER);
        //().add( canvas, BorderLayout.CENTER);
        pnMiddle.add( canvas, BorderLayout.CENTER);
        vComp = new Vector<DrawingComponent>();
        
        list = new ListModel();       
        lstComponents.setModel(list);
        defaultComponent();
        
        
        setSize(900,712);
        setVisible(true);
    }
    
    public void defaultComponent(){
        DrawingComponent curComp = new DrawingComponent("Default");
        vComp.add(curComp);
        setCurrentComponent(curComp);
        lstComponents.updateUI();
    }
    //public static DocumentsHolder getDefaultApp(){
    //    return defaultApp;
    //}
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileOpen = new javax.swing.JFileChooser();
        bgLayers = new javax.swing.ButtonGroup();
        bgTypes = new javax.swing.ButtonGroup();
        bgEditTools = new javax.swing.ButtonGroup();
        toolUpper = new javax.swing.JToolBar();
        tglDrawRect = new javax.swing.JToggleButton();
        tglEditRect = new javax.swing.JToggleButton();
        tglCut = new javax.swing.JToggleButton();
        tglZoomIn = new javax.swing.JToggleButton();
        tglZoomOut = new javax.swing.JToggleButton();
        toolLeft = new javax.swing.JToolBar();
        jPanel1 = new javax.swing.JPanel();
        pnLayers = new javax.swing.JPanel();
        pnTypes = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstComponents = new javax.swing.JList();
        lblSelectedComponent = new javax.swing.JLabel();
        pnStatus = new javax.swing.JPanel();
        lblStatus = new javax.swing.JLabel();
        pnMiddle = new javax.swing.JPanel();
        jscVertical = new javax.swing.JScrollBar();
        jscHorizontal = new javax.swing.JScrollBar();
        jMenuBar2 = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuNewFile = new javax.swing.JMenuItem();
        mnuAddDevice = new javax.swing.JMenuItem();
        mnuSaveFile = new javax.swing.JMenuItem();
        mnuSaveGDSII = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        mnuExit = new javax.swing.JMenuItem();
        mnuOption = new javax.swing.JMenu();
        mnuFill = new javax.swing.JCheckBoxMenuItem();
        mnuGrid = new javax.swing.JCheckBoxMenuItem();
        mnuScaling = new javax.swing.JMenuItem();
        mnuTools = new javax.swing.JMenu();
        mnuWizard = new javax.swing.JMenuItem();
        mnuReadGDSII = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        mnuGoto = new javax.swing.JMenuItem();
        mnuComponent = new javax.swing.JMenu();
        mnuNewComponent = new javax.swing.JMenuItem();
        mnuMove = new javax.swing.JMenuItem();
        mnuShowComponent = new javax.swing.JMenuItem();
        mnuComponentList = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        jMenuItem2 = new javax.swing.JMenuItem();

        setTitle("F~ CompSynth: VLSI Component Synthesizer and Distributor");
        setIconImage(getIconImage());

        bgEditTools.add(tglDrawRect);
        tglDrawRect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/faisal_TiLeD/adevgen/matchingchecker/images/Draw.gif"))); // NOI18N
        tglDrawRect.setSelected(true);
        tglDrawRect.setToolTipText("Draw Rectangle");
        tglDrawRect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglDrawRectActionPerformed(evt);
            }
        });
        toolUpper.add(tglDrawRect);

        bgEditTools.add(tglEditRect);
        tglEditRect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/faisal_TiLeD/adevgen/matchingchecker/images/Edit.gif"))); // NOI18N
        tglEditRect.setToolTipText("Edit Rectangle");
        tglEditRect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglEditRectActionPerformed(evt);
            }
        });
        toolUpper.add(tglEditRect);

        bgEditTools.add(tglCut);
        tglCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/faisal_TiLeD/adevgen/matchingchecker/images/Cut.gif"))); // NOI18N
        tglCut.setToolTipText("Edit Rectangle");
        tglCut.setFocusable(false);
        tglCut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tglCut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tglCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglCutActionPerformed(evt);
            }
        });
        toolUpper.add(tglCut);

        bgEditTools.add(tglZoomIn);
        tglZoomIn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/faisal_TiLeD/adevgen/matchingchecker/images/ZoomIn.gif"))); // NOI18N
        tglZoomIn.setToolTipText("Zoom In");
        tglZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglZoomInActionPerformed(evt);
            }
        });
        toolUpper.add(tglZoomIn);

        bgEditTools.add(tglZoomOut);
        tglZoomOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/faisal_TiLeD/adevgen/matchingchecker/images/ZoomOut.gif"))); // NOI18N
        tglZoomOut.setToolTipText("Zoom Out");
        tglZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglZoomOutActionPerformed(evt);
            }
        });
        toolUpper.add(tglZoomOut);

        getContentPane().add(toolUpper, java.awt.BorderLayout.NORTH);

        toolLeft.setOrientation(1);
        toolLeft.setRollover(true);

        jPanel1.setLayout(new java.awt.BorderLayout());

        pnLayers.setLayout(new java.awt.GridLayout(1, 0));
        jPanel1.add(pnLayers, java.awt.BorderLayout.NORTH);

        pnTypes.setLayout(new java.awt.GridLayout(1, 0));
        jPanel1.add(pnTypes, java.awt.BorderLayout.SOUTH);

        toolLeft.add(jPanel1);

        jToolBar2.setOrientation(1);
        jToolBar2.setRollover(true);

        jLabel1.setText("Components");
        jToolBar2.add(jLabel1);

        lstComponents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstComponentsMouseClicked(evt);
            }
        });
        lstComponents.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lstComponentsKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(lstComponents);

        jToolBar2.add(jScrollPane2);

        lblSelectedComponent.setBackground(new java.awt.Color(255, 255, 255));
        lblSelectedComponent.setText("Default");
        jToolBar2.add(lblSelectedComponent);

        toolLeft.add(jToolBar2);

        getContentPane().add(toolLeft, java.awt.BorderLayout.LINE_START);

        pnStatus.setLayout(new java.awt.BorderLayout());

        lblStatus.setText("Status :");
        pnStatus.add(lblStatus, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnStatus, java.awt.BorderLayout.SOUTH);

        pnMiddle.setLayout(new java.awt.BorderLayout());

        jscVertical.setMaximum(100000);
        jscVertical.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                jscVerticalAdjustmentValueChanged(evt);
            }
        });
        pnMiddle.add(jscVertical, java.awt.BorderLayout.LINE_END);

        jscHorizontal.setMaximum(100000);
        jscHorizontal.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        jscHorizontal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jscHorizontalMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jscHorizontalMouseReleased(evt);
            }
        });
        jscHorizontal.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                jscHorizontalAdjustmentValueChanged(evt);
            }
        });
        pnMiddle.add(jscHorizontal, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(pnMiddle, java.awt.BorderLayout.CENTER);

        mnuFile.setMnemonic('F');
        mnuFile.setText("File");
        mnuFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFileActionPerformed(evt);
            }
        });

        mnuNewFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, 0));
        mnuNewFile.setMnemonic('N');
        mnuNewFile.setText("New");
        mnuNewFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuNewFileActionPerformed(evt);
            }
        });
        mnuFile.add(mnuNewFile);

        mnuAddDevice.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, 0));
        mnuAddDevice.setMnemonic('A');
        mnuAddDevice.setText("Add Device");
        mnuAddDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddDeviceActionPerformed(evt);
            }
        });
        mnuFile.add(mnuAddDevice);

        mnuSaveFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, 0));
        mnuSaveFile.setMnemonic('S');
        mnuSaveFile.setText("Save");
        mnuSaveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveFileActionPerformed(evt);
            }
        });
        mnuFile.add(mnuSaveFile);

        mnuSaveGDSII.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, 0));
        mnuSaveGDSII.setMnemonic('G');
        mnuSaveGDSII.setText("Save As GDSII");
        mnuSaveGDSII.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveGDSIIActionPerformed(evt);
            }
        });
        mnuFile.add(mnuSaveGDSII);
        mnuFile.add(jSeparator2);

        mnuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        mnuExit.setMnemonic('x');
        mnuExit.setText("Exit");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExitActionPerformed(evt);
            }
        });
        mnuFile.add(mnuExit);

        jMenuBar2.add(mnuFile);

        mnuOption.setMnemonic('O');
        mnuOption.setText("Option");

        mnuFill.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        mnuFill.setText("Fill Rectangles");
        mnuFill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFillActionPerformed(evt);
            }
        });
        mnuOption.add(mnuFill);

        mnuGrid.setSelected(true);
        mnuGrid.setText("Show Grid");
        mnuGrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGridActionPerformed(evt);
            }
        });
        mnuOption.add(mnuGrid);

        mnuScaling.setText("Scaling Factor");
        mnuScaling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuScalingActionPerformed(evt);
            }
        });
        mnuOption.add(mnuScaling);

        jMenuBar2.add(mnuOption);

        mnuTools.setMnemonic('T');
        mnuTools.setText("Tools");

        mnuWizard.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, 0));
        mnuWizard.setMnemonic('W');
        mnuWizard.setText("Matching Wizard");
        mnuWizard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuWizardActionPerformed(evt);
            }
        });
        mnuTools.add(mnuWizard);

        mnuReadGDSII.setText("Read GDSII");
        mnuReadGDSII.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuReadGDSIIActionPerformed(evt);
            }
        });
        mnuTools.add(mnuReadGDSII);
        mnuTools.add(jSeparator1);

        mnuGoto.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        mnuGoto.setText("Go To");
        mnuGoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuGotoActionPerformed(evt);
            }
        });
        mnuTools.add(mnuGoto);

        jMenuBar2.add(mnuTools);

        mnuComponent.setMnemonic('C');
        mnuComponent.setText("Component");

        mnuNewComponent.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mnuNewComponent.setText("New Component");
        mnuNewComponent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuNewComponentActionPerformed(evt);
            }
        });
        mnuComponent.add(mnuNewComponent);

        mnuMove.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        mnuMove.setText("Move Component");
        mnuMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuMoveActionPerformed(evt);
            }
        });
        mnuComponent.add(mnuMove);

        mnuShowComponent.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mnuShowComponent.setText("Show Component");
        mnuShowComponent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowComponentActionPerformed(evt);
            }
        });
        mnuComponent.add(mnuShowComponent);

        mnuComponentList.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        mnuComponentList.setText("Component List");
        mnuComponentList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuComponentListActionPerformed(evt);
            }
        });
        mnuComponent.add(mnuComponentList);

        jMenuBar2.add(mnuComponent);

        jMenu1.setText("Help");

        jMenuItem1.setText("Quick Help");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);
        jMenu1.add(jSeparator3);

        jMenuItem2.setText("About");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar2.add(jMenu1);

        setJMenuBar(jMenuBar2);
    }// </editor-fold>//GEN-END:initComponents

private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
    java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                About dialog = new About(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
                dialog.setVisible(true);
            }
        });
}//GEN-LAST:event_jMenuItem2ActionPerformed

private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
    java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuickHelp().setVisible(true);
            }
        });
}//GEN-LAST:event_jMenuItem1ActionPerformed

private void mnuGotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGotoActionPerformed
    (new MoveComponent(this, 2)).setVisible(true);
}//GEN-LAST:event_mnuGotoActionPerformed

private void mnuShowComponentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowComponentActionPerformed
    if(canvas != null){
        canvas.setCenterX( - (int) currentComponent.left + 2);
        canvas.setCenterY( - (int) currentComponent.top + 2);
        canvas.repaint();
        showStatus("Center X:"+(-canvas.getCenterX())+"   Center Y:"+(-canvas.getCenterY()));
        //System.out.println("SASLA");
    }
}//GEN-LAST:event_mnuShowComponentActionPerformed

private void mnuMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuMoveActionPerformed
    (new MoveComponent(this, 1)).setVisible(true);
}//GEN-LAST:event_mnuMoveActionPerformed

private void mnuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExitActionPerformed
    System.exit(0);
}//GEN-LAST:event_mnuExitActionPerformed

private void mnuWizardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuWizardActionPerformed
    Wizard.main(null);
}//GEN-LAST:event_mnuWizardActionPerformed

private void mnuReadGDSIIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuReadGDSIIActionPerformed
    GDSIIView.main(null);
}//GEN-LAST:event_mnuReadGDSIIActionPerformed

private void mnuComponentListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuComponentListActionPerformed
    new ComponentList(this);
}//GEN-LAST:event_mnuComponentListActionPerformed
    
    private void tglCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglCutActionPerformed
        canvasMode = MODE_CUT;
}//GEN-LAST:event_tglCutActionPerformed
    
private void lstComponentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstComponentsMouseClicked
    if(evt.getClickCount() == 2){
        setCurrentComponent((DrawingComponent)lstComponents.getSelectedValue());
    }
}//GEN-LAST:event_lstComponentsMouseClicked

    private void mnuNewComponentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuNewComponentActionPerformed
        String componentName = JOptionPane.showInputDialog("Enter the component name");
        if (componentName == null)
            return;
        if(componentName.equals("")){
            setCurrentComponent(new DrawingComponent());
        }else{
            setCurrentComponent(new DrawingComponent(componentName));
        }
        vComp.add(currentComponent);
        lstComponents.updateUI();
}//GEN-LAST:event_mnuNewComponentActionPerformed
    
    public void deleteComponent(DrawingComponent dc){
        for(int i=0; i<dc.element.size(); i++){
            deleteObject(dc.element.get(i));
        }
        dc.destroy();
        
    }
    
    public void deleteAllComponent(){
        DrawingComponent dc;
        for(int i=0; i<vComp.size(); i++){
            dc = vComp.get(i);
            dc = null;
        }
        vComp.removeAllElements();
    }
    
private void lstComponentsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lstComponentsKeyReleased
    if(evt.getKeyCode() == evt.VK_DELETE){
        int ind = lstComponents.getSelectedIndex();
        DrawingComponent dc;
        
        dc = vComp.get(ind);
        
        deleteComponent(dc);
        
        if(ind > 0){
            setCurrentComponent(vComp.get(ind-1));
            dc = vComp.remove(ind);
            dc = null;
        }
                
        lstComponents.updateUI();
        canvas.repaint();
    }
}//GEN-LAST:event_lstComponentsKeyReleased

private void mnuSaveGDSIIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveGDSIIActionPerformed
    
    JFileChooser fileSaveGDSII = new JFileChooser();
    
    FileFilter fileFilter = new FileFilter() {
        public boolean accept(File f) {
            String fname = f.getName();
            if(fname.endsWith("gds"))
                return true;
            else
                return false;
        }
        public String getDescription() {
            return "GDSII File(*.gds)";
        }
    };
    
    fileSaveGDSII.setFileFilter(fileFilter);
    fileSaveGDSII.showSaveDialog(this);
    
    if(fileSaveGDSII.getSelectedFile()==null){
        return;
    }
    
    try{
        GDSFile gdsII = new GDSFile();
        int i, j, k;
        Vector<Structure> structure = new Vector<Structure>();
        Vector<Element> v_element;
        gdsII.setV_Structure(structure);
        
        
        DrawingComponent dc;
        Structure struct;
        
        DrawingObject dobj;
        Element elem;
        
        for(i=0; i<vComp.size(); i++){
            dc = vComp.get(i);
            if(dc.element.size() ==  0)
                continue;
            struct = new Structure();
            struct.setStructurename(dc.getName());
            struct.setXy(dc.getHorizontalMiddle(), dc.getVerticalMiddle());
            v_element = new Vector<Element>();
            for(j=0; j<dc.element.size(); j++){
                dobj = dc.element.get(j);
                elem = Boundary.decode(dobj);
                elem.setLayer(dobj.getGdsII());
                v_element.add(elem);
            }
            struct.setV_element(v_element);
            structure.add(struct);
        }
        
//        Vector<Element> elem = new Vector<Element>();
//        
//        
//        for(i=0; i<layers.length; i++){
//            for(j=0; j<layers[i].vcObjects.size(); j++){
//                dobj = layers[i].vcObjects.get(j);
//                elem.add(Boundary.decode(dobj));
//            }
//        }
        
        gdsII.write(fileSaveGDSII.getSelectedFile());
        JOptionPane.showMessageDialog(this, "Saved as GDSII file", "GDSII Export", JOptionPane.INFORMATION_MESSAGE);
        //addObjects(vRect);
    }catch(Exception e){
        e.printStackTrace();
    }
}//GEN-LAST:event_mnuSaveGDSIIActionPerformed

private void mnuGridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuGridActionPerformed
    isGridVisible = mnuGrid.isSelected();
    refresh();
}//GEN-LAST:event_mnuGridActionPerformed

private void mnuScalingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuScalingActionPerformed
    try{
        double l = Double.parseDouble(javax.swing.JOptionPane.showInputDialog("1 Pixel = ? lambda \n(Current 1 Pixel = "+(1.0 / lambda)+" lambda )"));
        lambda = (int)(1.0 / l);
        showStatus("The change will be effective with next device addition.");
    }catch(Exception e){
        
    }
}//GEN-LAST:event_mnuScalingActionPerformed

private void mnuFillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFillActionPerformed
    isFill = mnuFill.isSelected();
    refresh();
}//GEN-LAST:event_mnuFillActionPerformed

private void mnuSaveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveFileActionPerformed
    
    if(fileOpen != null){
        fileOpen = null;
        fileOpen = new JFileChooser();
    }
    FileFilter fileFilter = new FileFilter() {
        public boolean accept(File f) {
            String fname = f.getName();
            if(fname.endsWith("txt"))
                return true;
            else
                return false;
        }
        public String getDescription() {
            return "Text File(*.txt)";
        }
    };
    
    fileOpen.setSelectedFile(null);
    fileOpen.setFileFilter(fileFilter);
    fileOpen.showSaveDialog(this);
    
    if(fileOpen.getSelectedFile()==null){
        return;
    }
    
    try{
        RandomAccessFile ras = new RandomAccessFile(fileOpen.getSelectedFile(),"rws");
        
        int i, j;
        DrawingObject dobj;
        String str;
        for(i=0; i<layers.length; i++){
            for(j=0; j<layers[i].vcObjects.size(); j++){
                dobj = layers[i].vcObjects.get(j);
                str = "GDSII Layers No:"+dobj.getGdsII()+"  X:"+dobj.x+"  Y:"+dobj.y+"  W:"+dobj.w+"  H:"+dobj.h+"\n";
                ras.write(str.getBytes());
            }
        }
        ras.close();
        //addObjects(vRect);
    }catch(Exception e){
        e.printStackTrace();
    }
}//GEN-LAST:event_mnuSaveFileActionPerformed

private void jscHorizontalMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jscHorizontalMouseReleased
    //    if(canvas != null){
    //    canvas.setCenterX(jscHorizontal.getValue());
    //    canvas.repaint();
    //    showStatus("Center X:"+canvas.getCenterX()+"   Center Y:"+canvas.getCenterY());
    //    System.out.println("SASLA");
    //    }
}//GEN-LAST:event_jscHorizontalMouseReleased

private void jscHorizontalMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jscHorizontalMousePressed
    
}//GEN-LAST:event_jscHorizontalMousePressed

private void mnuFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFileActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_mnuFileActionPerformed

private void jscVerticalAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_jscVerticalAdjustmentValueChanged
    if(canvas != null){
        canvas.setCenterY( -jscVertical.getValue());
        canvas.repaint();
        showStatus("Center X:"+(-canvas.getCenterX())+"   Center Y:"+(-canvas.getCenterY()));
        //System.out.println("SASLA");
    }
}//GEN-LAST:event_jscVerticalAdjustmentValueChanged

private void jscHorizontalAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_jscHorizontalAdjustmentValueChanged
    if(canvas != null){
        canvas.setCenterX( -jscHorizontal.getValue());
        canvas.repaint();
        showStatus("Center X:"+(-canvas.getCenterX())+"   Center Y:"+(-canvas.getCenterY()));
        //System.out.println("SASLA");
    }
}//GEN-LAST:event_jscHorizontalAdjustmentValueChanged

private void mnuAddDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddDeviceActionPerformed
    
    if(fileOpen != null){
        fileOpen = null;
        fileOpen = new JFileChooser();
    }
    FileFilter fileFilter = new FileFilter() {
        public boolean accept(File f) {
            String fname = f.getName();
            if(fname.endsWith("dts"))
                return true;
            else
                return false;
        }
        public String getDescription() {
            return "Device Template Script File(*.dts)";
        }
    };
    
    fileOpen.setFileFilter(fileFilter);
    fileOpen.showOpenDialog(this);
    
    if(fileOpen.getSelectedFile()==null){
        return;
    }
    //    return;
    vRect = new Vector<ComplexRect>();
    DTSParser dts = new DTSParser();
    File file = fileOpen.getSelectedFile();
    
    try{
        
        setCurrentComponent(new DrawingComponent(file.getName()));
        if(size_w == 0)
            vRect = dts.getParsed(new String[]{file.getCanonicalPath()});
        else
            vRect = dts.getParsed(new String[]{file.getCanonicalPath(), ""+size_w, ""+size_h});
        if(vRect.size() > 0){
            canvasMode = MODE_SELECT_POINT;
            showStatus("Please select a position to place.","alert");
            //list.add(file.getName());
            
            vComp.add(currentComponent);
            lstComponents.updateUI();
            
        }
        
        //addObjects(vRect);
    }catch(Exception e){
        e.printStackTrace();
    }
    
    file = null;
}//GEN-LAST:event_mnuAddDeviceActionPerformed

    public void newDocuments(){
        for(int i=0; i < layers.length; i++){
            layers[i].deleteAll();
        }
        
        deleteAllComponent();
        //bnDC.repaint();
        canvas.repaint();
    }

    private void mnuNewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuNewFileActionPerformed
        newDocuments();
    }//GEN-LAST:event_mnuNewFileActionPerformed
    
    private void tglZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglZoomOutActionPerformed
        canvasMode = MODE_ZOOM_OUT;
        showStatus("Zoom Factor: "+ canvas.getZoomX() + "x" + canvas.getZoomY());
    }//GEN-LAST:event_tglZoomOutActionPerformed
    
    private void tglZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglZoomInActionPerformed
        canvasMode = MODE_ZOOM_IN;
        showStatus("Zoom Factor: "+ canvas.getZoomX() + "x" + canvas.getZoomY());
    }//GEN-LAST:event_tglZoomInActionPerformed
    
    private void tglEditRectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglEditRectActionPerformed
        canvasMode = MODE_EDIT;
    }//GEN-LAST:event_tglEditRectActionPerformed
    
    private void tglDrawRectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglDrawRectActionPerformed
        canvasMode = MODE_DRAW;
    }//GEN-LAST:event_tglDrawRectActionPerformed
    
    private void setCurrentComponent(DrawingComponent dc){
    currentComponent = dc;
    lblSelectedComponent.setText("Selected: "+currentComponent.toString());
}

    public void addObjects(int x, int y){
    int i,j;
    double left,top;
    left = vRect.get(0).left;
    top = vRect.get(0).top;
    for(i=1; i<vRect.size(); i++){
        if(left > vRect.get(i).left)
            left = vRect.get(i).left;
        if(top > vRect.get(i).top)
            top = vRect.get(i).top;
    }
    left = -left;
    top = -top;
    for(i=0; i<vRect.size(); i++){
        vRect.get(i).left += left;
        vRect.get(i).right += left;
        vRect.get(i).top += top;
        vRect.get(i).bottom += top;
    }
    for(i=0; i<vRect.size(); i++){
        
        addObjectToLayer(vRect.get(i).layer,
                (int)Math.round(vRect.get(i).left * lambda)+x,
                (int)Math.round(vRect.get(i).top * lambda)+y,
                (int)Math.round(vRect.get(i).getLength() * lambda),
                (int)Math.round(vRect.get(i).getWidth() * lambda));
    }
    //canvas.repaint();
    tglDrawRect.doClick();
}

    public void deleteObject(int x, int y){
        DrawingObject dobj;
        showStatus("Deleting ("+x+", "+y+")");
        for(int i=layers.length-1; i > 0; i--){
            dobj = layers[i].delete(x, y);
            if(dobj != null){
                for(i=0; i<vComp.size(); i++){
                    if(vComp.get(i).delete(dobj))
                        dobj = null;
                        return;
                }
            }
        }
    }

    public void createObjects(){
        if(types != null)
            return;
        types = new DrawingObject[13];
        
        types[0] = new DrawingObject("TextRef",  new Color(0,0,0), " / ", true,0);
        types[1] = new DrawingObject("Oxide",     new Color(0,255,255,100), " \\ ", true,1);
        types[2] = new DrawingObject("PWell", new Color(255,255,0,100), " - ", true,2);
        types[3] = new DrawingObject("Via",       new Color(155,0,255,100), " . ", true,3);
        types[4] = new DrawingObject("Metal 2",     new Color(255,0,155,100), " H ", true,4);
        types[5] = new DrawingObject("Polysilicon 2",     new Color(255,150,0,100), " * ", true,5);
        types[6] = new DrawingObject("Metal 3",         new Color(150,255,0,100), "\\/  ", true,6);
        types[7] = new DrawingObject("Polysilicon 1",  new Color(255,0,0,100), " / ", true,7);
        types[8] = new DrawingObject("Layer 8",  new Color(255,0,0,100), " / ", true,8);
        types[9] = new DrawingObject("N Implant",     new Color(255,0,255,100), " | ", true,9);
        types[10] = new DrawingObject("Layer 10",  new Color(255,0,0,100), " / ", true,10);
        types[11] = new DrawingObject("Contact",      new Color(140,0,0,230), ".  ", true,11);
        types[12] = new DrawingObject("Metal 1",      new Color(0,0,255,100) , "---", true,12);
        
    }
    
    public DrawingObject getType(String str){
        for(int i=0; i<types.length; i++)
            if(types[i].getName().equals(str))
                return types[i];
        return null;
    }
            
    public void addLayersToPanel(int n){
        if(layers == null){
            layers = new DrawingLayer[n];
            pnLayers.setLayout(new GridLayout(n+1, 3));
            
            JLabel lblLayer = new JLabel("Layer");
            lblLayer.setFont(new Font("Arial",Font.BOLD,12));
            pnLayers.add(lblLayer);
            
            JLabel lblCurrent = new JLabel("Current");
            lblLayer.setFont(new Font("Arial",Font.BOLD,12));
            pnLayers.add(lblCurrent);
            
            JLabel lblVisible = new JLabel("Visible");
            lblLayer.setFont(new Font("Arial",Font.BOLD,12));
            pnLayers.add(lblVisible);
            
            for(int i=0; i<n; i++){
                layers[i] = new DrawingLayer(types[i].getName(), this, types[i]);
                layers[i].addToButtonGroup(bgLayers);
                layers[i].addToPanel(pnLayers);
            }
        }
    }
    
    public void createCurrentObject(int x, int y, int w, int h){
        if(currentLayer!=null)
            currentObject = new DrawingObject(x, y, w, h, currentLayer.getType());
        else
            lblStatus.setText("Select Object Type");
    }
    
    public void changeCurrentObjectsPosition(int x, int y, int w, int h){
        if(currentObject!=null)
            currentObject.changePosition(x, y, w, h);
        else
            lblStatus.setText("Select Object Type");
    }
    
    public void destroyCurrentObject(){
        currentObject = null;
    }
    
    public void setCurrentLayer(DrawingLayer layer){
        currentLayer = layer;
        
        /*
        if(currentLayer != null)
        System.out.println("Yes");
        else
        System.out.println("Not");
         */
    }
    
    public void paintComponentNames(Graphics g){
        for(int i=0; i < vComp.size(); i++){
            vComp.get(i).draw(g);
        }
    }
    
    public void paintLayers(Graphics g){
        for(int i=0; i < layers.length; i++){
            layers[i].paint(g);
        }
    }
        
    public void offPaintLayers(Graphics g){
        for(int i=0; i < layers.length; i++){
            //layers[i].offPaint(g);
            layers[i].paint(g);
        }
        currentObject.paint(g, false);
    }
    
    public int isLocated(int x, int y){
        int mode;
        for(int i=layers.length-1; i > 0; i--){
            mode = layers[i].isLocated(x, y);
            if(mode != 0)
                return mode;
        }
        return 0;
    }
    
    public DrawingLayer getCurrentLayer(){
        return currentLayer;
    }
            
    public void addObjectToLayer(int x, int y, int w, int h){
        if(currentLayer != null)
            currentLayer.addObject(x,y,w,h);
        else
            System.out.println("No Current Layer");
    }
    
    public void deleteObject(DrawingObject dobj){
        for(int i=0; i < layers.length; i++){
            if(layers[i].delete(dobj)){
                //for(i=0; i<vComp.size(); i++){
                //    if(vComp.get(i).delete(dobj))
                //        dobj = null;
                        return;
                //}                
            }
        }
    }
    
    public void addObjectToLayer(int layerid, int x, int y, int w, int h){
        int i,j;
        for(i=0; i<layers.length; i++){
            if(layers[i].getType().getGdsII()==layerid){
                layers[i].addObject(x, y, w, h);
            }
        }
    }
    
    public void autoGenerate(int matrix[][], int type, int w, int h){
        long x, y;
        int i,j;
        size_w = w;
        size_h = h;
        Vector<ComplexRect> vr[] = new Vector[type];
        
        for(i=0; i<type; i++){
            mnuAddDevice.doClick();
            vr[i] = vRect;
        }
        
        
    }
            
    public void refresh(){
        //bnDC.repaint();
        canvas.repaint();
        lstComponents.updateUI();
    }
    
    public void showStatus(String s){
        lblStatus.setOpaque(false);
        
        lblStatus.setText(s);
    }
    
    public void showStatus(String s, String mode){
        if(mode.equals("alert")){
            lblStatus.setOpaque(true);
            lblStatus.setBackground(Color.RED);
        }
        lblStatus.setText(s);
    }
    
    public static DocumentsHolder getDefaultApp() {
        return defaultApp;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgEditTools;
    private javax.swing.ButtonGroup bgLayers;
    private javax.swing.ButtonGroup bgTypes;
    private javax.swing.JFileChooser fileOpen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JToolBar jToolBar2;
    public javax.swing.JScrollBar jscHorizontal;
    public javax.swing.JScrollBar jscVertical;
    private javax.swing.JLabel lblSelectedComponent;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JList lstComponents;
    private javax.swing.JMenuItem mnuAddDevice;
    private javax.swing.JMenu mnuComponent;
    private javax.swing.JMenuItem mnuComponentList;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JCheckBoxMenuItem mnuFill;
    private javax.swing.JMenuItem mnuGoto;
    private javax.swing.JCheckBoxMenuItem mnuGrid;
    private javax.swing.JMenuItem mnuMove;
    private javax.swing.JMenuItem mnuNewComponent;
    private javax.swing.JMenuItem mnuNewFile;
    private javax.swing.JMenu mnuOption;
    private javax.swing.JMenuItem mnuReadGDSII;
    private javax.swing.JMenuItem mnuSaveFile;
    private javax.swing.JMenuItem mnuSaveGDSII;
    private javax.swing.JMenuItem mnuScaling;
    private javax.swing.JMenuItem mnuShowComponent;
    private javax.swing.JMenu mnuTools;
    private javax.swing.JMenuItem mnuWizard;
    private javax.swing.JPanel pnLayers;
    private javax.swing.JPanel pnMiddle;
    private javax.swing.JPanel pnStatus;
    private javax.swing.JPanel pnTypes;
    private javax.swing.JToggleButton tglCut;
    public javax.swing.JToggleButton tglDrawRect;
    private javax.swing.JToggleButton tglEditRect;
    private javax.swing.JToggleButton tglZoomIn;
    private javax.swing.JToggleButton tglZoomOut;
    private javax.swing.JToolBar toolLeft;
    private javax.swing.JToolBar toolUpper;
    // End of variables declaration//GEN-END:variables
    
}
