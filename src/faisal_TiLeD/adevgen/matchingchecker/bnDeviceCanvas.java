/*
 * bnDeviceCanvas.java
 *
 * Created on April 4, 2007, 9:51 PM
 */

package faisal_TiLeD.adevgen.matchingchecker;

import faisal_TiLeD.adevgen.matchingchecker.*;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import javax.swing.JPanel;
import java.beans.*;
import java.io.Serializable;

/**
 * @author Administrator
 */
public class bnDeviceCanvas extends JPanel implements Serializable {
    
    public static final String PROP_SAMPLE_PROPERTY = "sampleProperty";
    
    private String sampleProperty;
    
    private PropertyChangeSupport propertySupport;
    
    public static final int EDIT_UPPER = 1;
    public static final int EDIT_LOWER = 2;
    public static final int EDIT_LEFT = 3;
    public static final int EDIT_RIGHT = 4;
    public static final int EDIT_BODY = 5;
    
    public static final double ZOOM_FACTOR = 1.25;
    public int edit_mode;
    public static DrawingObject selectedObject;
    
    private DocumentsHolder parent = DocumentsHolder.getDefaultApp();
    private boolean isDragging;
    
    
    private int centerX;
    private int centerY;
    
    //private double preZoomX;
    //private double preZoomY;
    private double zoomX;
    private double zoomY;
    
    private int x1, x2, y1, y2;
    // Variables declaration - do not modify
    private javax.swing.JMenuItem mnuDownRight;
    private javax.swing.JPopupMenu mnuPopUp;
    private javax.swing.JMenuItem mnuUpLeft;
    // End of variables declaration
    /** Creates new form DrawingCanvas */
    
    public bnDeviceCanvas() {
        System.out.println(this.getLocation().getX());
        propertySupport = new PropertyChangeSupport(this);
        isDragging = false;
        setParent(DocumentsHolder.getDefaultApp());
        setBackground(Color.WHITE);
        initComponents();
        initView();
        setSize(1200,1000);
    }
    
    public void initView(){
        zoomX = 20.0;
        zoomY = 20.0;
        //x_grid = 20;
        //y_grid = 16;
        //preZoomX = 1;
        //preZoomY = 1;
        centerX = 0;
        centerY = 0;
    }
    
    public void zoomIn(int x1, int y1, int x2, int y2){
        double w = Math.abs(x2-x1);
        double h = Math.abs(y2-y1);
        
        
        if( w < 10 || h < 10)
            zoomIn(x2, y2);
        else{
            
            if(x1 > x2){
                int t = x1;
                x1 = x2;
                x2 = t;
            }
            if(y1 > y2){
                int t = y1;
                y1 = y2;
                y2 = t;
            }
            
            double preZoomX = zoomX;
            double preZoomY = zoomY;
            
            zoomX = getWidth() / (w / preZoomX);
            zoomY = getHeight() / (h / preZoomY);
            
            double x = x1 + (w / 2);
            double y = y1 + (h / 2);
            
            centerX += (int)((x-centerX)-(((x-centerX)/preZoomX)*zoomX));
            centerY += (int)((y-centerY)-(((y-centerY)/preZoomY)*zoomY));
            
        }
        
    }
    
    public void zoomIn(int x, int y){
        double preZoomX = zoomX;
        double preZoomY = zoomY;
        
        
        zoomX *= ZOOM_FACTOR;
        zoomY *= ZOOM_FACTOR;
        
        //centerX = centerX -((((x - centerX)/preZoomX)*zoomX)-(x - centerX));
        //centerX += (int)((((x - centerX) / zoomX) - ((x - centerX) / preZoomX)) * zoomX);
        //centerY += (int)((((y - centerY) / zoomY) - ((y - centerY) / preZoomY)) * zoomY);
        centerX += (int)((x-centerX)-(((x-centerX)/preZoomX)*zoomX));
        centerY += (int)((y-centerY)-(((y-centerY)/preZoomY)*zoomY));
        System.out.println(centerX+"  "+zoomX);
    }
    
    public void zoomOut(int x, int y){
        double preZoomX = zoomX;
        double preZoomY = zoomY;
        
        zoomX /= ZOOM_FACTOR;
        zoomY /= ZOOM_FACTOR;
        
        //centerX += (int)((((x - centerX) / zoomX) - ((x - centerX) / preZoomX)) * zoomX);
        //centerY += (int)((((y - centerY) / zoomY) - ((y - centerY) / preZoomY)) * zoomY);
        centerX += (int)((x-centerX)-(((x-centerX)/preZoomX)*zoomX));
        centerY += (int)((y-centerY)-(((y-centerY)/preZoomY)*zoomY));
        System.out.println(centerX+"  "+zoomX);
    }
    
    public double getZoomX(){
        return zoomX;
    }
    
    public double getZoomY(){
        return zoomY;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">
    private void initComponents() {
        mnuPopUp = new javax.swing.JPopupMenu();
        mnuDownRight = new javax.swing.JMenuItem();
        mnuUpLeft = new javax.swing.JMenuItem();
        
        mnuDownRight.setText("Move Down Right");
        mnuPopUp.add(mnuDownRight);
        
        mnuUpLeft.setText("Move Up Left");
        mnuPopUp.add(mnuUpLeft);
        
        setLayout(null);
        
        setBackground(new java.awt.Color(255, 255, 255));
        
        setComponentPopupMenu(mnuPopUp);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        
    }// </editor-fold>
    
    private void formMouseMoved(java.awt.event.MouseEvent evt) {
        if(getParent().canvasMode == getParent().MODE_EDIT){
            edit_mode = getParent().isLocated((int)((evt.getX()/zoomX)-(centerX/zoomX)), (int)((evt.getY()/zoomY)-(centerY/zoomY)));
            x1 = evt.getX();
            y1 = evt.getY();
            repaint();
        }
    }
    
    
    
    private void formMouseDragged(java.awt.event.MouseEvent evt) {
        /*/////////////////////////////////
        x2 = evt.getX() / x_grid;
        y2 = evt.getY() / y_grid;
         * 
         * /////////////////////*/
        
        repaint();
        if(getParent().canvasMode == getParent().MODE_DRAW){
            int w, h;
            int x, y;
            
            x2 = evt.getX();
            y2 = evt.getY();
            
            if(x1 < x2){
                x = x1;
                w = x2 - x1;
            }else{
                x = x2;
                w = x1 - x2;
            }
            
            if(y1 < y2){
                y = y1;
                h = y2 - y1;
            }else{
                y = y2;
                h = y1 - y2;
            }
            
            getParent().changeCurrentObjectsPosition((int)((x-centerX)/zoomX), (int)((y-centerY)/zoomY), (int)(w/zoomX), (int)(h/zoomY));
            getParent().showStatus("Dragging: x:"+x+", y:"+y+", w:"+w+", h:"+h);
            repaint();
        } else if(getParent().canvasMode == getParent().MODE_EDIT){
            x2 = evt.getX();
            y2 = evt.getY();
            if(edit_mode != 0){
                if(edit_mode != EDIT_BODY){
                    //selectedObject.changeShape(edit_mode, (int)(x2/zoomX), (int)(y2/zoomY));
                    selectedObject.changeShape(edit_mode, (int)((x2/zoomX)-(centerX/zoomX)), (int)((y2/zoomY)-(centerY/zoomY)));
                } else{
                    selectedObject.changeShape(edit_mode, (int)((x2-x1)/zoomX), (int)((y2-y1)/zoomY));
                    x1 = x2;
                    y1 = y2;
                }
                
                repaint();
            }
        } else if(getParent().canvasMode == getParent().MODE_ZOOM_IN){
            x2 = evt.getX();
            y2 = evt.getY();
            
            repaint();
        }
    }
    
    private void formMouseReleased(java.awt.event.MouseEvent evt) {
        System.out.println(evt.getX());
        /*//////////////////
        x2 = evt.getX() / x_grid;
        y2 = evt.getY() / y_grid;

        if(isDrawing){
            if(dsl != null) dsl.drawFinished(x2, y2);
            isDrawing = false;
            repaint();
        }
         * 
         * /////////////*/
        
        isDragging = false;
        if(getParent().canvasMode == getParent().MODE_DRAW){
            int w, h;
            int x, y;
            
            x2 = evt.getX();
            y2 = evt.getY();
            
            if(x1 < x2){
                x = x1;
                w = x2 - x1;
            }else{
                x = x2;
                w = x1 - x2;
            }
            
            if(y1 < y2){
                y = y1;
                h = y2 - y1;
            }else{
                y = y2;
                h = y1 - y2;
            }
            
            getParent().addObjectToLayer((int)((x-centerX)/zoomX), (int)((y-centerY)/zoomY), (int)(w/zoomX), (int)(h/zoomY));
            repaint();
        } else if(getParent().canvasMode == getParent().MODE_ZOOM_IN){
            //zoomIn((int)(x1/zoomX), (int)(y1/zoomY), (int)(evt.getX()/zoomX), (int)(evt.getY()/zoomY));
            //zoomIn((int)(evt.getX()/zoomX), (int)(evt.getY()/zoomY));
            zoomIn(x1, y1, evt.getX(), evt.getY());
            repaint();
        } else if(getParent().canvasMode == getParent().MODE_ZOOM_OUT){
            //zoomOut((int)(evt.getX()/zoomX), (int)(evt.getY()/zoomY));
            zoomOut(evt.getX(), evt.getY());
            repaint();
        } else if(getParent().canvasMode == getParent().MODE_LEFT){
            centerX += 10;
            repaint();
        }
        
    }
    
    private void formMousePressed(java.awt.event.MouseEvent evt) {
        isDragging = true;
        x1 = evt.getX();
        y1 = evt.getY();
        if(getParent().canvasMode == getParent().MODE_DRAW){
            getParent().createCurrentObject((int)(x1/zoomX), (int)(y1/zoomY), 0, 0);
        } else if(getParent().canvasMode == getParent().MODE_EDIT){
            getParent().showStatus("Mode: " + edit_mode);
        }
        /*//////
        if(evt.getButton() == evt.BUTTON1){
            x1 = evt.getX() / x_grid;
            y1 = evt.getY() / y_grid;
            
            if(dsl != null) dsl.drawStarted(x1, y1);
        }else{
            isDrawing = false;
            if(dsl != null) dsl.drawCanceled();
            repaint();
        }
         * 
         * ////////*/
    }
    
    public void paint(Graphics g){
        super.paint(g);
        Graphics2D g2d = (Graphics2D)g;
        /*
        g2d.setColor(Color.RED);
        g2d.drawRect(100,100,100,100);
        g2d.scale(0.5, 0.5);
         
        g2d.setColor(Color.BLUE);
        g2d.drawRect(100,100,100,100);
         
        g2d.translate(50, 50);
        g2d.setColor(Color.GREEN);
        g2d.drawRect(100,100,100,100);
         */
        g2d.translate(centerX, centerY);
        //g2d.translate(-(centerX*preZoomX), -(centerY*preZoomY));
        g2d.scale(zoomX,zoomY);
        //g2d.translate(-(centerX), -(centerY));
        //g2d.translate((centerX/zoomX), (centerY/zoomY));
        
        /*
        for(int i=0; i<getWidth()/zoomX; i+=(40/zoomX)){
            g2d.drawLine(i, 0, i, 40);
            g2d.drawString(""+i, i, 40);
        }
         */
        if(DocumentsHolder.canvasMode == DocumentsHolder.MODE_DRAW){
            if(isDragging){
                getParent().offPaintLayers(g2d);
                //g.drawOval(x1,y1,x2,y2);
            } else{
                getParent().paintLayers(g2d);
            }
        } else if(DocumentsHolder.canvasMode == DocumentsHolder.MODE_EDIT){
            getParent().paintLayers(g2d);
            if(edit_mode != 0)
                selectedObject.paintSelected(g2d, edit_mode);
        } else if(DocumentsHolder.canvasMode == DocumentsHolder.MODE_ZOOM_IN){
            //System.out.println(centerX);
            //g2d.translate(centerX, centerY);
            //System.out.println(preZoomX+"  "+zoomX+"");
            getParent().paintLayers(g2d);
            if(isDragging){
                g2d.scale(1/zoomX,1/zoomY);
                g2d.translate(-centerX, -centerY);
                //g2d.translate(-(centerX*preZoomX), -(centerY*preZoomY));
                
                g2d.setColor(Color.ORANGE);
                //g2d.draw3DRect((int)(x1/zoomX), (int)(y1/zoomY), (int)(x2/1), (int)(y2/1), true);
                if(x1 > x2){
                    int t = x1;
                    x1 = x2;
                    x2 = t;
                }
                if(y1 > y2){
                    int t = y1;
                    y1 = y2;
                    y2 = t;
                }
                g2d.draw3DRect(x1, y1, (x2-x1), (y2-y1), true);
                //g2d.draw3DRect((int)(x1/zoomX), (int)(y1/zoomY), (int)((x2-x1)/zoomX), (int)((y2-y1)/zoomY), true);
                //g2d.draw3DRect(x1, y1, (int)((x2-x1)/zoomX), (int)((y2-y1)/zoomY), true);
            }
        } else if(DocumentsHolder.canvasMode == DocumentsHolder.MODE_ZOOM_OUT){
            getParent().paintLayers(g2d);
        } else if(DocumentsHolder.canvasMode == DocumentsHolder.MODE_LEFT){
            getParent().paintLayers(g2d);
            g2d.drawLine(0,0,10,10);
        }
        g2d.setColor(Color.BLUE);
        g2d.drawRect(0,0,10,10) ;
        
    }
    
    
    public String getSampleProperty() {
        return sampleProperty;
    }
    
    public void setSampleProperty(String value) {
        String oldValue = sampleProperty;
        sampleProperty = value;
        propertySupport.firePropertyChange(PROP_SAMPLE_PROPERTY, oldValue, sampleProperty);
    }
    
    
    public void addPropertyChangeListener(PropertyChangeListener listener) {
        propertySupport.addPropertyChangeListener(listener);
    }
    
    public void removePropertyChangeListener(PropertyChangeListener listener) {
        propertySupport.removePropertyChangeListener(listener);
    }
    
    public DocumentsHolder getParent() {
        return parent;
    }
    
    public void setParent(DocumentsHolder parent) {
        this.parent = parent;
    }
    
    
}
