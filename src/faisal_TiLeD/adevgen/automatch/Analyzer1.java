/*
 * Analyzer.java
 *
 * Created on July 26, 2007, 7:19 PM
 */
package faisal_TiLeD.adevgen.automatch;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JTextField;
/**
 *
 * @author  TV
 */
public class Analyzer1 extends javax.swing.JFrame implements ActionListener {
    JComboBox jcb[][];
    JLabel txtRowResult[][];
    JLabel txtColResult[][];
    int row;
    int col;
    int type;
    /** Creates new form Analyzer */
    public Analyzer1() {
        initComponents();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnLeft = new javax.swing.JPanel();
        txtType = new javax.swing.JTextField();
        txtColumn = new javax.swing.JTextField();
        btnLeyoutGenerator = new javax.swing.JButton();
        txtRow = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtFinalCost = new javax.swing.JTextField();
        pnCenter = new javax.swing.JPanel();
        pnAnal = new javax.swing.JPanel();
        pnGrid = new javax.swing.JPanel();
        pnRowResult = new javax.swing.JPanel();
        pnColResult = new javax.swing.JPanel();
        pnSummeryResult = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SerialBase");

        btnLeyoutGenerator.setText("LayGen");
        btnLeyoutGenerator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeyoutGeneratorActionPerformed(evt);
            }
        });

        jLabel1.setText("Type:");

        jLabel2.setText("Column:");

        jLabel3.setText("Row:");

        jLabel4.setText("Final Cost:");

        javax.swing.GroupLayout pnLeftLayout = new javax.swing.GroupLayout(pnLeft);
        pnLeft.setLayout(pnLeftLayout);
        pnLeftLayout.setHorizontalGroup(
            pnLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnLeftLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtFinalCost, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnLeftLayout.createSequentialGroup()
                        .addGroup(pnLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(pnLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtType, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                            .addComponent(txtColumn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                            .addComponent(txtRow, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                            .addComponent(btnLeyoutGenerator, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        pnLeftLayout.setVerticalGroup(
            pnLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnLeftLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(pnLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtColumn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnLeyoutGenerator)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFinalCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(100, Short.MAX_VALUE))
        );

        getContentPane().add(pnLeft, java.awt.BorderLayout.WEST);

        pnCenter.setLayout(new java.awt.BorderLayout());

        pnAnal.setLayout(new java.awt.GridLayout(2, 2));

        javax.swing.GroupLayout pnGridLayout = new javax.swing.GroupLayout(pnGrid);
        pnGrid.setLayout(pnGridLayout);
        pnGridLayout.setHorizontalGroup(
            pnGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 202, Short.MAX_VALUE)
        );
        pnGridLayout.setVerticalGroup(
            pnGridLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        pnAnal.add(pnGrid);

        javax.swing.GroupLayout pnRowResultLayout = new javax.swing.GroupLayout(pnRowResult);
        pnRowResult.setLayout(pnRowResultLayout);
        pnRowResultLayout.setHorizontalGroup(
            pnRowResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 202, Short.MAX_VALUE)
        );
        pnRowResultLayout.setVerticalGroup(
            pnRowResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        pnAnal.add(pnRowResult);

        javax.swing.GroupLayout pnColResultLayout = new javax.swing.GroupLayout(pnColResult);
        pnColResult.setLayout(pnColResultLayout);
        pnColResultLayout.setHorizontalGroup(
            pnColResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 202, Short.MAX_VALUE)
        );
        pnColResultLayout.setVerticalGroup(
            pnColResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        pnAnal.add(pnColResult);

        javax.swing.GroupLayout pnSummeryResultLayout = new javax.swing.GroupLayout(pnSummeryResult);
        pnSummeryResult.setLayout(pnSummeryResultLayout);
        pnSummeryResultLayout.setHorizontalGroup(
            pnSummeryResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 202, Short.MAX_VALUE)
        );
        pnSummeryResultLayout.setVerticalGroup(
            pnSummeryResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        pnAnal.add(pnSummeryResult);

        pnCenter.add(pnAnal, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnCenter, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
private void btnLeyoutGeneratorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeyoutGeneratorActionPerformed
    try{
        
        
        type = Integer.parseInt(txtType.getText());
        
        row = Integer.parseInt(txtRow.getText());
        col = Integer.parseInt(txtColumn.getText());
        //*
        if(pnGrid.getComponentCount() > 0){
            pnGrid.removeAll();
            pnRowResult.removeAll();
            pnColResult.removeAll();
        }
        Vector<Integer> items = new Vector<Integer>();
        int i, j;
        for(i=0; i<type; i++){
            items.add(i);
        }
        
        jcb = new JComboBox[row][col];
        pnGrid.setLayout(new GridLayout(row, col));
        for(i=0; i<row; i++){
            for(j=0; j<col; j++){
                jcb[i][j] = new JComboBox(items);
                jcb[i][j].setVisible(true);
                jcb[i][j].addActionListener(this);
                pnGrid.add(jcb[i][j]);
            }
        }
        pnGrid.updateUI();
        
        int nr = 1;//type * 3;
        
        pnRowResult.setLayout(new GridLayout(row, nr));
        txtRowResult = new JLabel[row][nr];
        for(i=0; i<row; i++){
            
            for(j=0; j<nr; j++){
                txtRowResult[i][j] = new JLabel("0");
                txtRowResult[i][j].setVisible(true);
                pnRowResult.add(txtRowResult[i][j]);
            }
        }
        pnRowResult.updateUI();
        
        nr = type * 2 + 1;
        pnColResult.setLayout(new GridLayout(nr, col));
        txtColResult = new JLabel[nr][col];
        for(i=0; i<nr; i++){
            for(j=0; j<col; j++){
                txtColResult[i][j] = new JLabel("0");
                txtColResult[i][j].setVisible(true);
                pnColResult.add(txtColResult[i][j]);
            }
        }
        pnColResult.updateUI();
        
        //*/
    }catch(Exception e){
        
    }
}//GEN-LAST:event_btnLeyoutGeneratorActionPerformed

public void calculate(){
    int i, j;
    int rowSum[][] = new int[row][type];
    int colSum[][] = new int[type][col];
    int rowCount[][] = new int[row][type];
    int colCount[][] = new int[type][col];
    double rowAvg[][] = new double[row][type];
    double colAvg[][] = new double[type][col];
    double rowSD[] = new double[row];
    double colSD[] = new double[col];
    
    //Sum & Count
    int val;
    for(i=0; i<row; i++){
        for(j=0; j<col; j++){
            val = jcb[i][j].getSelectedIndex();
            rowSum[i][val] += (j+1);
            colSum[val][j] += (i+1);
            rowCount[i][val] ++;
            colCount[val][j] ++;
        }
    }
    
    //Row average
    for(i=0; i<row; i++){
        for(j=0; j<type; j++){
            if(rowSum[i][j] > 0)
                rowAvg[i][j] = rowSum[i][j] / rowCount[i][j];
            else
                rowAvg[i][j] = 0;
        }
    }
    double sum;
    double avg;
//    for(i=0; i<row; i++){
//        sum = 0;
//        for(j=0; j<type; j++){
//            sum += rowAvg[i][j];
//        }
//        avg = sum / type;
//        for(j=0; j<type; j++){
//            sum += (avg-rowAvg[i][j])*(avg-rowAvg[i][j]);
//        }
//        rowSD[i] = Math.sqrt(sum/type);
////        txtRowResult[i][type+type].setText(""+rowSD[i]);
//    }
    //mahmudulfaisal@gmail.com
    //ameenuddin@yahoo.com
    
    //Column average
    for(i=0; i<type; i++){
        for(j=0; j<col; j++){
            if(colSum[i][j] > 0)
                colAvg[i][j] = colSum[i][j] / colCount[i][j];
            else
                colAvg[i][j] = 0;
        }
    }
//    for(i=0; i<col; i++){
//        sum = 0;
//        for(j=0; j<type; j++){
//            sum += colAvg[j][i];
//        }
//        avg = sum / type;
//        for(j=0; j<type; j++){
//            sum += (avg-colAvg[j][i])*(avg-colAvg[j][i]);
//        }
//        colSD[i] = Math.sqrt(sum/type);
////        txtColResult[type+type][i].setText(""+colSD[i]);
//    }
    //
    String res = "";
    double rowSDAvg = 0, colSDAvg = 0;
    
    for(i=0; i<row; i++){
        res = "";
        for(j=0; j<type; j++){
            //txtRowResult[i][j].setText(""+rowSum[i][j]);
            //txtRowResult[i][j+type].setText(""+rowAvg[i][j]);
            res += ("Sum("+j+"):"+rowSum[i][j]+"  ");
        }
        sum = 0;
        for(j=0; j<type; j++){
            //txtRowResult[i][j].setText(""+rowSum[i][j]);
            //txtRowResult[i][j+type].setText(""+rowAvg[i][j]);
            res += ("Avg("+j+"):"+rowAvg[i][j]+"  ");
            sum += rowAvg[i][j];
        }
        avg = sum / type;
        for(j=0; j<type; j++){
            sum += (avg-rowAvg[i][j])*(avg-rowAvg[i][j]);
        }
        rowSD[i] = Math.sqrt(sum/type);
        rowSDAvg += rowSD[i];
        txtRowResult[i][0].setText(res+"SD: "+rowSD[i]);        
    }
    
    for(i=0; i<col; i++){
        res = "";
        for(j=0; j<type; j++){
            txtColResult[j][i].setText("Sum("+j+"):"+colSum[j][i]);
            txtColResult[j+type][i].setText("Avg("+j+"):"+colAvg[j][i]);
            //res += ("Sum("+type+"):"+colSum[j][i]+"\n");
        }
        sum = 0;
        for(j=0; j<type; j++){
            //res += ("Avg("+type+"):"+colAvg[j][i]+"\n");
            sum += colAvg[j][i];
        }
        avg = sum / type;
        for(j=0; j<type; j++){
            sum += (avg-colAvg[j][i])*(avg-colAvg[j][i]);
        }
        colSD[i] = Math.sqrt(sum/type);
        colSDAvg += colSD[i];
        txtColResult[type+type][i].setText("SD: "+colSD[i]);        
    }
    
    txtFinalCost.setText("" + ((rowSDAvg/row + colSDAvg/col)/2));
   
}

public void actionPerformed(ActionEvent ae){
    calculate();
}
/**
 * @param args the command line arguments
 */
public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            new Analyzer1().setVisible(true);
        }
    });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLeyoutGenerator;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel pnAnal;
    private javax.swing.JPanel pnCenter;
    private javax.swing.JPanel pnColResult;
    private javax.swing.JPanel pnGrid;
    private javax.swing.JPanel pnLeft;
    private javax.swing.JPanel pnRowResult;
    private javax.swing.JPanel pnSummeryResult;
    private javax.swing.JTextField txtColumn;
    private javax.swing.JTextField txtFinalCost;
    private javax.swing.JTextField txtRow;
    private javax.swing.JTextField txtType;
    // End of variables declaration//GEN-END:variables
    
}
