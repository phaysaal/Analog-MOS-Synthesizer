/*
 * DragDropGrid.java
 *
 * Created on July 28, 2007, 10:39 AM
 */

package faisal_TiLeD.adevgen.automatch;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionListener;

/**
 *
 * @author  TV
 */
public class DragDropGrid extends javax.swing.JPanel {
    
    int matrix[][];
    int row;
    int col;
    int x;
    int y;
    int col_width;
    int row_height;
    
    int x1;
    int y1;
    int x2;
    int y2;
    boolean isDragged;
    Color color[] = new Color[2];
    
    ActionListener al;
    /** Creates new form DragDropGrid */
    public DragDropGrid() {
        initComponents();
        //color[0] = new Color(200,0,100,70);
        //color[1] = new Color(0,200,100,70);
        color[0] = new Color(80,80,40);
        color[1] = new Color(200,190,200);
    }
    
    public void addActionListener(ActionListener al){
        this.al = al;
    }
    
    public void init(int row, int col, int x, int y){
        this.row = row;
        this.col = col;
        this.x = x;
        this.y = y;
        matrix = new int[row][col];
        
        int i, j;
        int nx = x < y? x: y;
        for(i=0; i<row; i++){
            for(j=0; j<col; j++){
                if(nx > 0){
                    matrix[i][j] = 1;
                    nx --;
                }else{
                    matrix[i][j] = 2;
                }
            }
        }
                
        repaint();
    }
    
    public double distance(int a, int b, int n){
        int i, j;
        double sum = 0;
        for(i=0; i<row; i++){
            for(j=0; j<col; j++){                
                 if(matrix[i][j] == n){
                     sum += Math.sqrt(Math.sqrt((a-i)*(a-i)+(b-j)*(b-j)));
                 }
            }
        }
        return sum;
    }
    public double calculateDistance(){
        int i, j;
        int n = 1;
        double sum = 0;
        for(i=0; i<row; i++){
            for(j=0; j<col; j++){                
                 if(matrix[i][j] == n){
                     sum += distance(i, j, n);
                 }
            }
        }
        return sum/2;
    }
    
    public void averageSequence(int x){
        //Queue<Integer>
        
    }
    public void reArrange(){
        int a = x;//x < y ? x : y;
        int i, j;
        XDimension xd = new XDimension(col);
        YDimension yd = new YDimension(row);
        xd.capasityDistribute(a);
        yd.capasityDistribute(a);
        
        Element elements[] = new Element[x];
        for(i=0; i<elements.length; i++){
            elements[i] = new Element();
        }
        
        xd.distribute(elements);
        yd.distribute(elements);
        
        for(i=0; i<row; i++){
            for(j=0; j<col; j++){                
                 matrix[i][j] = 2;
            }
        }
        
        for(i=0; i<elements.length; i++){
            matrix[elements[i].getY()][elements[i].getX()] = 1;
        }
        
        elements = null;
        xd = null;
        yd = null;
        repaint();
        
    }
    
    public double calculateDistribution(){
        double ratio = x / (double)(x+y);
        double result = 0.0;
        int i, j;
        double count;
        for(i=0; i<matrix.length; i++){
            count = 0;
            for(j=0; j<matrix[i].length; j++){
                if(matrix[i][j] == 1)
                    count ++;
            }
            result += Math.pow(ratio - (count/matrix[i].length), 2.0);
        }
        for(i=0; i<matrix[0].length; i++){
            count = 0;
            for(j=0; j<matrix.length; j++){
                if(matrix[j][i] == 1)
                    count ++;
            }
            result += Math.pow(ratio - (count/matrix.length), 2.0);
        }
        return result;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
    //x2 = evt.getX() ;
    //y2 = evt.getY() ;
    y2 = evt.getX() / col_width;
    x2 = evt.getY() / row_height;
    repaint();
}//GEN-LAST:event_formMouseDragged

private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
    y2 = evt.getX() / col_width;
    x2 = evt.getY() / row_height;
    
    
    
    if(evt.getButton()!=evt.BUTTON1){
        if(matrix[x2][y2]==1){
            matrix[x2][y2] = 2;
            y ++;
            x --;
           
        }else{
            matrix[x2][y2] = 1;
            x ++;
            y --;
        }
    }else{
        if(matrix[x1][y1] != matrix[x2][y2]){
            int t = matrix[x1][y1] ;
            matrix[x1][y1] = matrix[x2][y2] ;
            matrix[x2][y2] = t;
        }
    }
      
    isDragged = false;
    //System.out.println("Released: "+x2+","+y2);
    
    repaint();
    al.actionPerformed(null);
}//GEN-LAST:event_formMouseReleased

private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
    y1 = evt.getX() / col_width;
    x1 = evt.getY() / row_height;
    
    //System.out.println("Pressed: "+x1+","+y1);
    isDragged = true;
}//GEN-LAST:event_formMousePressed
    
    public void paint(Graphics g){
        super.paint(g);
        col_width  = getWidth() / (col);
        row_height = getHeight() / (row);
        int i, j;
        
        for(i=0; i<row; i++){
            for(j=0; j<col; j++){
                g.setColor(color[matrix[i][j]-1]);
                
                g.fillRect(j*col_width+3, i*row_height+3, col_width-6, row_height-6);      
                //System.out.println(matrix[i][j]);
            }
        }
        
        if(isDragged){
            g.setColor(color[matrix[x1][y1]-1]);
            g.fillRect(y2*col_width+3, x2*row_height+3, col_width-6, row_height-6);     
            //g.fillRect(x2+3, y2+3, col_width-6, row_height-6);                
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
